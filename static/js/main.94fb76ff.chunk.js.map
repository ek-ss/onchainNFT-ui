{"version":3,"sources":["utils/utils.ts","contexts/accounts.tsx","components/Identicon/index.tsx","components/CurrentUserBadge/index.tsx","components/Settings/index.tsx","components/ConnectButton/index.tsx","components/AppBar/index.tsx","components/Layout/index.tsx","routes.tsx","App.tsx","serviceWorker.ts","index.tsx","utils/notifications.tsx","constants/labels.ts","constants/math.ts","utils/ids.ts","ipfs/ipfs.ts","utils/getIpfsHash.ts","views/home/index.tsx","utils/eventEmitter.ts","hooks/useUserAccounts.ts","components/ExplorerLink/index.tsx","contexts/connection.tsx","wallet-adapters/phantom/index.tsx","contexts/wallet.tsx"],"names":["Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","useLocalStorageState","key","defaultState","useState","storedState","localStorage","getItem","JSON","parse","state","setState","setLocalStorageState","useCallback","newState","removeItem","setItem","stringify","shortenAddress","address","chars","slice","Set","chunks","array","size","Array","apply","Math","ceil","length","map","_","index","currency","numberFormatter","formatNumber","format","val","useSmall","isSmallNumber","AccountsContext","React","createContext","pendingCalls","Map","genericCache","transactionCache","MintParser","pubKey","info","buffer","Buffer","from","data","deserializeMint","pubkey","account","TokenAccountParser","deserializeAccount","keyToAccountParser","cache","emitter","EventEmitter","query","connection","parser","a","id","PublicKey","toBase58","get","getAccountInfo","then","Error","add","set","obj","deserialize","registerParser","delete","isNew","has","raiseCacheUpdated","raiseCacheDeleted","byParser","result","keys","push","addTransaction","signature","tx","addBulkTransactions","txs","getTransaction","getAllTransactions","clear","raiseCacheCleared","useAccountsContext","useContext","UseNativeAccount","useConnection","useWallet","wallet","publicKey","nativeAccount","setNativeAccount","updateCache","wrapped","mint","WRAPPED_SOL_MINT","owner","amount","u64","lamports","delegate","delegatedAmount","isInitialized","isFrozen","isNative","rentExemptReserve","closeAuthority","wrapNativeAccount","undefined","useEffect","acc","onAccountChange","PRECACHED_OWNERS","precacheUserTokenAccounts","getTokenAccountsByOwner","programId","programIds","token","value","forEach","AccountsProvider","children","connected","tokenAccounts","setTokenAccounts","userAccounts","setUserAccounts","selectUserAccounts","filter","accounts","subs","onCache","args","removeAccountChangeListener","tokenSubID","onProgramAccountChange","accountId","accountInfo","AccountLayout","span","removeProgramAccountChangeListener","Provider","useNativeAccount","getMultipleAccounts","commitment","Promise","all","chunk","getMultipleAccountsCore","rest","flat","_buildArgs","_rpcRequest","unsafeRes","error","message","decode","fromBuffer","delegateOption","isNativeOption","closeAuthorityOption","MintLayout","mintInfo","mintAuthorityOption","mintAuthority","supply","freezeAuthorityOption","freezeAuthority","Identicon","props","className","ref","useRef","current","innerHTML","appendChild","Jazzicon","width","parseInt","bs58","toString","CurrentUserBadge","LAMPORTS_PER_SOL","marginLeft","display","Settings","disconnect","useConnectionConfig","endpoint","setEndpoint","onSelect","marginBottom","ENDPOINTS","name","Option","type","onClick","ConnectButton","connect","select","disabled","provider","menu","allowWalletChange","Item","Button","overlay","LABELS","CONNECT_LABEL","AppBar","tabIndex","color","placement","title","SETTINGS_TOOLTIP","content","trigger","shape","icon","SettingOutlined","right","Header","Layout","Content","AppLayout","memo","to","padding","Routes","basename","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","notify","description","txid","notification","opacity","backgroundColor","SEND_LABEL","TRANSACTION_2_LABEL","BORROWING_POWER_USED","BORROWING_POWER_VALUE","BORROWED_VALUE","GIVE_SOL","CAST_CARD","CREATE_FIGHT","LIQUIDATION_INFO","FAUCET_INFO","ACCOUNT_FUNDED","REPAY_QUESTION","REPAY_ACTION","RESERVE_STATUS_TITLE","AUDIT_WARNING","FOOTER","MENU_HOME","MENU_DASHBOARD","DASHBOARD_INFO","TRANSACTIONS_INFO","NO_LOANS_NO_DEPOSITS","MENU_DEPOSIT","DEPOSITS","BORROWS","LOAN_TO_VALUE","MENU_BORROW","MENU_LIQUIDATE","MENU_FAUCET","MENU_TRANSACTION","MARGIN_TRADING","APP_TITLE","CONNECT_BUTTON","WALLET_TOOLTIP","WALLET_BALANCE","SELECT_COLLATERAL","COLLATERAL","BORROW_QUESTION","BORROW_ACTION","NO_COLLATERAL","NO_DEPOSITS","NO_LOANS","NOTHING_BORROWED","NOTHING_BORROWED_MESSAGE","BORROW_NOW","LIQUIDATE_QUESTION","LIQUIDATE_ACTION","LIQUIDATE_NO_LOANS","TABLE_TITLE_ASSET","TABLE_TITLE_YOUR_LOAN_BALANCE","TABLE_TITLE_LOAN_BALANCE","TABLE_TITLE_COLLATERAL_BALANCE","TABLE_TITLE_DEPOSIT_BALANCE","TABLE_TITLE_APY","TABLE_TITLE_LTV","TABLE_TITLE_HEALTH","TABLE_TITLE_BORROW_APY","TABLE_TITLE_DEPOSIT_APY","TABLE_TITLE_TOTAL_BORROWED","TABLE_TITLE_MARKET_SIZE","TABLE_TITLE_ACTION","TABLE_TITLE_DEPOSITS","TABLE_TITLE_WITHDRAWS","TABLE_TITLE_BORROWS","TABLE_TITLE_REPAY_OBLIGATIONS","TABLE_TITLE_LIQUIDATE_OBLIGATIONS","MAX_LTV","LIQUIDATION_THRESHOLD","LIQUIDATION_PENALTY","TABLE_TITLE_MAX_BORROW","DASHBOARD_TITLE_LOANS","DASHBOARD_TITLE_DEPOSITS","DEPOSIT_QUESTION","WITHDRAW_ACTION","WITHDRAW_QUESTION","DASHBOARD_ACTION","GO_BACK_ACTION","DEPOSIT_ACTION","TOTAL_TITLE","TRADING_TABLE_TITLE_MY_COLLATERAL","TRADING_TABLE_TITLE_DESIRED_ASSET","TRADING_TABLE_TITLE_MULTIPLIER","TRADING_TABLE_TITLE_ASSET_PRICE","TRADING_TABLE_TITLE_LIQUIDATION_PRICE","TRADING_TABLE_TITLE_APY","TRADING_TABLE_TITLE_ACTIONS","TRADING_ADD_POSITION","MARGIN_TRADE_ACTION","MARGIN_TRADE_CHOOSE_COLLATERAL_AND_LEVERAGE","MARGIN_TRADE_QUESTION","TABLE_TITLE_BUYING_POWER","NOT_ENOUGH_MARGIN_MESSAGE","SET_MORE_MARGIN_MESSAGE","LEVERAGE_LIMIT_MESSAGE","NO_DEPOSIT_MESSAGE","NO_COLL_TYPE_MESSAGE","SAFER","RISKIER","TEN","BN","WAD","pow","ZERO","TOKEN_PROGRAM_ID","PROGRAM_IDS","setProgramIds","envName","find","env","ipfs","require","host","port","protocol","getImageIpfsHash","files","hash","onWalletConnected","HomeView","png","setPng","setName","load","setLoad","creatorId","metaplexProgramId","systemProgramId","sysvarRentAccountPublicKey","tokenProgramId","associatedTokenProgramId","seed_input","concatBuffer","bufs","len","reduce","b","buf","start","copy","tx2","log","findProgramAddress","toBuffer","tokenMintAccountPublicKeyNonce","tokenMintAccountPublicKey","mintProgPublicKeyNonce","mintProgPublicKey","metadataAccountPublicKeyNonce","metadataAccountPublicKey","metadata","metadata_u8","tokenname","tokensymbol","pgm","subarray","base64str","pgm_data","pgm_image","scale","imgdata","Uint8ClampedArray","i","ix","iy","floor","y","x","canvas","createElement","height","ctx","getContext","image","ImageData","putImageData","dataurl","toDataURL","png_data","split","hash_img","uri_img","metadataContent","symbol","seller_fee_basis_points","collection","animation_url","attributes","external_url","properties","uri","category","creators","share","metadata_json","manifestBuffer","uri_ipfs","instructionUpdate","TransactionInstruction","isSigner","isWritable","sendTransactionWithRetry","confirmTransaction","setSeed","tx1","instructions","Token","getAssociatedTokenAddress","associatedAccountPublicKey","cntPayPublicKeyNonce","cntPayPublicKey","instructionPay","editionAccountPublicKeyNonce","editionAccountPublicKey","cntMetaPublicKeyNonce","cntMetaPublicKey","instructionMeta","getParsedConfirmedTransaction","useParams","page","gutter","align","src","alt","min","max","defaultValue","onChange","href","CacheUpdateEvent","this","CacheDeleteEvent","MarketUpdateEvent","ids","CacheClearEvent","Emitter","callback","on","removeListener","emit","useUserAccounts","ExplorerLink","code","target","Text","chainID","ChainID","MainnetBeta","clusterApiUrl","Devnet","DEFAULT","ConnectionContext","slippage","setSlippage","Connection","sendConnection","tokens","tokenMap","ConnectionProvider","useMemo","chain","end","setTokens","setTokenMap","TokenListProvider","resolve","res","list","filterByChainId","excludeByTag","getList","knownMints","item","Account","onSlotChange","removeSlotChangeListener","parseFloat","context","getErrorForTransaction","errors","meta","logMessages","m","regex","exec","lastIndex","sendTransaction","signers","awaitConfirmation","onSignInWallet","transaction","Transaction","instruction","getRecentBlockhash","recentBlockhash","blockhash","setSigners","s","partialSign","signTransaction","t","rawTransaction","serialize","options","skipPreflight","sendRawTransaction","status","err","PhantomWalletAdapter","_handleConnect","_handleDisconnect","bind","solana","isPhantom","_provider","isConnected","autoApprove","transactions","signAllTransactions","listeners","WALLET_PROVIDERS","url","adapter","WalletContext","WalletProvider","autoConnect","setAutoConnect","providerUrl","setProviderUrl","Wallet","setConnected","walletPublicKey","keyToDisplay","substring","isModalVisible","setIsModalVisible","close","okText","visible","okButtonProps","onCancel","marginRight","textAlign"],"mappings":"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","file":"static/js/main.94fb76ff.chunk.js","sourcesContent":["import { useCallback, useState } from \"react\";\nimport { MintInfo } from \"@solana/spl-token\";\n\nimport { TokenAccount } from \"./../models\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { WAD, ZERO } from \"../constants\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\n\nexport type KnownTokenMap = Map<string, TokenInfo>;\n\nexport const formatPriceNumber = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 8,\n});\n\nexport function useLocalStorageState(key: string, defaultState?: string) {\n  const [state, setState] = useState(() => {\n    // NOTE: Not sure if this is ok\n    const storedState = localStorage.getItem(key);\n    if (storedState) {\n      return JSON.parse(storedState);\n    }\n    return defaultState;\n  });\n\n  const setLocalStorageState = useCallback(\n    (newState) => {\n      const changed = state !== newState;\n      if (!changed) {\n        return;\n      }\n      setState(newState);\n      if (newState === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, JSON.stringify(newState));\n      }\n    },\n    [state, key]\n  );\n\n  return [state, setLocalStorageState];\n}\n\n// shorten the checksummed version of the input address to have 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n}\n\nexport function getTokenName(\n  map: KnownTokenMap,\n  mint?: string | PublicKey,\n  shorten = true\n): string {\n  const mintAddress = typeof mint === \"string\" ? mint : mint?.toBase58();\n\n  if (!mintAddress) {\n    return \"N/A\";\n  }\n\n  const knownSymbol = map.get(mintAddress)?.symbol;\n  if (knownSymbol) {\n    return knownSymbol;\n  }\n\n  return shorten ? `${mintAddress.substring(0, 5)}...` : mintAddress;\n}\n\nexport function getTokenByName(tokenMap: KnownTokenMap, name: string) {\n  let token: TokenInfo | null = null;\n  for (const val of tokenMap.values()) {\n    if (val.symbol === name) {\n      token = val;\n      break;\n    }\n  }\n  return token;\n}\n\nexport function getTokenIcon(\n  map: KnownTokenMap,\n  mintAddress?: string | PublicKey\n): string | undefined {\n  const address =\n    typeof mintAddress === \"string\" ? mintAddress : mintAddress?.toBase58();\n  if (!address) {\n    return;\n  }\n\n  return map.get(address)?.logoURI;\n}\n\nexport function isKnownMint(map: KnownTokenMap, mintAddress: string) {\n  return !!map.get(mintAddress);\n}\n\nexport const STABLE_COINS = new Set([\"USDC\", \"wUSDC\", \"USDT\"]);\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(\n    0,\n    new Array(Math.ceil(array.length / size))\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function toLamports(\n  account?: TokenAccount | number,\n  mint?: MintInfo\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount =\n    typeof account === \"number\" ? account : account.info.amount?.toNumber();\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  return Math.floor(amount * precision);\n}\n\nexport function wadToLamports(amount?: BN): BN {\n  return amount?.div(WAD) || ZERO;\n}\n\nexport function fromLamports(\n  account?: TokenAccount | number | BN,\n  mint?: MintInfo,\n  rate: number = 1.0\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount = Math.floor(\n    typeof account === \"number\"\n      ? account\n      : BN.isBN(account)\n      ? account.toNumber()\n      : account.info.amount.toNumber()\n  );\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  return (amount / precision) * rate;\n}\n\nvar SI_SYMBOL = [\"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n\nconst abbreviateNumber = (number: number, precision: number) => {\n  let tier = (Math.log10(number) / 3) | 0;\n  let scaled = number;\n  let suffix = SI_SYMBOL[tier];\n  if (tier !== 0) {\n    let scale = Math.pow(10, tier * 3);\n    scaled = number / scale;\n  }\n\n  return scaled.toFixed(precision) + suffix;\n};\n\nexport const formatAmount = (\n  val: number,\n  precision: number = 6,\n  abbr: boolean = true\n) => (abbr ? abbreviateNumber(val, precision) : val.toFixed(precision));\n\nexport function formatTokenAmount(\n  account?: TokenAccount,\n  mint?: MintInfo,\n  rate: number = 1.0,\n  prefix = \"\",\n  suffix = \"\",\n  precision = 6,\n  abbr = false\n): string {\n  if (!account) {\n    return \"\";\n  }\n\n  return `${[prefix]}${formatAmount(\n    fromLamports(account, mint, rate),\n    precision,\n    abbr\n  )}${suffix}`;\n}\n\nexport const formatUSD = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});\n\nexport const numberFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const isSmallNumber = (val: number) => {\n  return val < 0.001 && val > 0;\n};\n\nexport const formatNumber = {\n  format: (val?: number, useSmall?: boolean) => {\n    if (!val) {\n      return \"--\";\n    }\n    if (useSmall && isSmallNumber(val)) {\n      return 0.001;\n    }\n\n    return numberFormatter.format(val);\n  },\n};\n\nexport const feeFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 9,\n});\n\nexport const formatPct = new Intl.NumberFormat(\"en-US\", {\n  style: \"percent\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport function convert(\n  account?: TokenAccount | number,\n  mint?: MintInfo,\n  rate: number = 1.0\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount =\n    typeof account === \"number\" ? account : account.info.amount?.toNumber();\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  let result = (amount / precision) * rate;\n\n  return result;\n}\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useConnection } from \"./connection\";\nimport { useWallet } from \"./wallet\";\nimport {\n  AccountInfo,\n  ConfirmedSignatureInfo,\n  ConfirmedTransaction,\n  Connection,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { AccountLayout, u64, MintInfo, MintLayout } from \"@solana/spl-token\";\nimport { TokenAccount } from \"./../models\";\nimport { chunks } from \"./../utils/utils\";\nimport { EventEmitter } from \"./../utils/eventEmitter\";\nimport { useUserAccounts } from \"../hooks/useUserAccounts\";\nimport { WRAPPED_SOL_MINT, programIds } from \"../utils/ids\";\n\nconst AccountsContext = React.createContext<any>(null);\n\nconst pendingCalls = new Map<string, Promise<ParsedAccountBase>>();\nconst genericCache = new Map<string, ParsedAccountBase>();\nconst transactionCache = new Map<string, ParsedLocalTransaction | null>();\n\nexport interface ParsedLocalTransaction {\n  transactionType: number;\n  signature: ConfirmedSignatureInfo;\n  confirmedTx: ConfirmedTransaction | null;\n}\n\nexport interface ParsedAccountBase {\n  pubkey: PublicKey;\n  account: AccountInfo<Buffer>;\n  info: any; // TODO: change to unkown\n}\n\nexport type AccountParser = (\n  pubkey: PublicKey,\n  data: AccountInfo<Buffer>\n) => ParsedAccountBase | undefined;\n\nexport interface ParsedAccount<T> extends ParsedAccountBase {\n  info: T;\n}\n\nexport const MintParser = (pubKey: PublicKey, info: AccountInfo<Buffer>) => {\n  const buffer = Buffer.from(info.data);\n\n  const data = deserializeMint(buffer);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: data,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const TokenAccountParser = (\n  pubKey: PublicKey,\n  info: AccountInfo<Buffer>\n) => {\n  const buffer = Buffer.from(info.data);\n  const data = deserializeAccount(buffer);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: data,\n  } as TokenAccount;\n\n  return details;\n};\n\nexport const GenericAccountParser = (\n  pubKey: PublicKey,\n  info: AccountInfo<Buffer>\n) => {\n  const buffer = Buffer.from(info.data);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: buffer,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const keyToAccountParser = new Map<string, AccountParser>();\n\nexport const cache = {\n  emitter: new EventEmitter(),\n  query: async (\n    connection: Connection,\n    pubKey: string | PublicKey,\n    parser?: AccountParser\n  ) => {\n    let id: PublicKey;\n    if (typeof pubKey === \"string\") {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n\n    let account = genericCache.get(address);\n    if (account) {\n      return account;\n    }\n\n    let query = pendingCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    // TODO: refactor to use multiple accounts query with flush like behavior\n    query = connection.getAccountInfo(id).then((data) => {\n      if (!data) {\n        throw new Error(\"Account not found\");\n      }\n\n      return cache.add(id, data, parser);\n    }) as Promise<TokenAccount>;\n    pendingCalls.set(address, query as any);\n\n    return query;\n  },\n  add: (\n    id: PublicKey | string,\n    obj: AccountInfo<Buffer>,\n    parser?: AccountParser\n  ) => {\n    if (obj.data.length === 0) {\n      return;\n    }\n\n    const address = typeof id === \"string\" ? id : id?.toBase58();\n    const deserialize = parser ? parser : keyToAccountParser.get(address);\n    if (!deserialize) {\n      throw new Error(\n        \"Deserializer needs to be registered or passed as a parameter\"\n      );\n    }\n\n    cache.registerParser(id, deserialize);\n    pendingCalls.delete(address);\n    const account = deserialize(new PublicKey(address), obj);\n    if (!account) {\n      return;\n    }\n\n    const isNew = !genericCache.has(address);\n\n    genericCache.set(address, account);\n    cache.emitter.raiseCacheUpdated(address, isNew, deserialize);\n    return account;\n  },\n  get: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== \"string\") {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return genericCache.get(key);\n  },\n  delete: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== \"string\") {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    if (genericCache.get(key)) {\n      genericCache.delete(key);\n      cache.emitter.raiseCacheDeleted(key);\n      return true;\n    }\n    return false;\n  },\n\n  byParser: (parser: AccountParser) => {\n    const result: string[] = [];\n    for (const id of keyToAccountParser.keys()) {\n      if (keyToAccountParser.get(id) === parser) {\n        result.push(id);\n      }\n    }\n\n    return result;\n  },\n  registerParser: (pubkey: PublicKey | string, parser: AccountParser) => {\n    if (pubkey) {\n      const address = typeof pubkey === \"string\" ? pubkey : pubkey?.toBase58();\n      keyToAccountParser.set(address, parser);\n    }\n\n    return pubkey;\n  },\n  addTransaction: (signature: string, tx: ParsedLocalTransaction | null) => {\n    transactionCache.set(signature, tx);\n    return tx;\n  },\n  addBulkTransactions: (txs: Array<ParsedLocalTransaction>) => {\n    for (const tx of txs) {\n      transactionCache.set(tx.signature.signature, tx);\n    }\n    return txs;\n  },\n  getTransaction: (signature: string) => {\n    const transaction = transactionCache.get(signature);\n    return transaction;\n  },\n  getAllTransactions: () => {\n    return transactionCache;\n  },\n  clear: () => {\n    genericCache.clear();\n    transactionCache.clear();\n    cache.emitter.raiseCacheCleared();\n  },\n};\n\nexport const useAccountsContext = () => {\n  const context = useContext(AccountsContext);\n\n  return context;\n};\n\nfunction wrapNativeAccount(\n  pubkey: PublicKey,\n  account?: AccountInfo<Buffer>\n): TokenAccount | undefined {\n  if (!account) {\n    return undefined;\n  }\n\n  return {\n    pubkey: pubkey,\n    account,\n    info: {\n      address: pubkey,\n      mint: WRAPPED_SOL_MINT,\n      owner: pubkey,\n      amount: new u64(account.lamports),\n      delegate: null,\n      delegatedAmount: new u64(0),\n      isInitialized: true,\n      isFrozen: false,\n      isNative: true,\n      rentExemptReserve: null,\n      closeAuthority: null,\n    },\n  };\n}\n\nconst UseNativeAccount = () => {\n  const connection = useConnection();\n  const { wallet, publicKey } = useWallet();\n\n  const [nativeAccount, setNativeAccount] = useState<AccountInfo<Buffer>>();\n\n  const updateCache = useCallback(\n    (account) => {\n      if (!connection || !publicKey) {\n        return;\n      }\n\n      const wrapped = wrapNativeAccount(publicKey, account);\n      if (wrapped !== undefined) {\n        const id = publicKey.toBase58();\n        cache.registerParser(id, TokenAccountParser);\n        genericCache.set(id, wrapped as TokenAccount);\n        cache.emitter.raiseCacheUpdated(id, false, TokenAccountParser);\n      }\n    },\n    [publicKey, connection]\n  );\n\n  useEffect(() => {\n    if (!connection || !publicKey) {\n      return;\n    }\n\n    connection.getAccountInfo(publicKey).then((acc) => {\n      if (acc) {\n        updateCache(acc);\n        setNativeAccount(acc);\n      }\n    });\n    connection.onAccountChange(publicKey, (acc) => {\n      if (acc) {\n        updateCache(acc);\n        setNativeAccount(acc);\n      }\n    });\n  }, [setNativeAccount, wallet, publicKey, connection, updateCache]);\n\n  return { nativeAccount };\n};\n\nconst PRECACHED_OWNERS = new Set<string>();\nconst precacheUserTokenAccounts = async (\n  connection: Connection,\n  owner?: PublicKey\n) => {\n  if (!owner) {\n    return;\n  }\n\n  // used for filtering account updates over websocket\n  PRECACHED_OWNERS.add(owner.toBase58());\n\n  // user accounts are update via ws subscription\n  const accounts = await connection.getTokenAccountsByOwner(owner, {\n    programId: programIds().token,\n  });\n  accounts.value.forEach((info) => {\n    cache.add(info.pubkey.toBase58(), info.account, TokenAccountParser);\n  });\n};\n\nexport function AccountsProvider({ children = null as any }) {\n  const connection = useConnection();\n  const { publicKey, wallet, connected } = useWallet();\n  const [tokenAccounts, setTokenAccounts] = useState<TokenAccount[]>([]);\n  const [userAccounts, setUserAccounts] = useState<TokenAccount[]>([]);\n  const { nativeAccount } = UseNativeAccount();\n\n  const selectUserAccounts = useCallback(() => {\n    if (!publicKey) {\n      return [];\n    }\n\n    const address = publicKey.toBase58();\n\n    return cache\n      .byParser(TokenAccountParser)\n      .map((id) => cache.get(id))\n      .filter((a) => a && a.info.owner.toBase58() === address)\n      .map((a) => a as TokenAccount);\n  }, [publicKey]);\n\n  useEffect(() => {\n    const accounts = selectUserAccounts().filter(\n      (a) => a !== undefined\n    ) as TokenAccount[];\n    setUserAccounts(accounts);\n  }, [nativeAccount, wallet, tokenAccounts, selectUserAccounts]);\n\n  useEffect(() => {\n    const subs: number[] = [];\n    cache.emitter.onCache((args) => {\n      if (args.isNew) {\n        let id = args.id;\n        let deserialize = args.parser;\n        connection.onAccountChange(new PublicKey(id), (info) => {\n          cache.add(id, info, deserialize);\n        });\n      }\n    });\n\n    return () => {\n      subs.forEach((id) => connection.removeAccountChangeListener(id));\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    if (!connection || !publicKey) {\n      setTokenAccounts([]);\n    } else {\n      precacheUserTokenAccounts(connection, publicKey).then(() => {\n        setTokenAccounts(selectUserAccounts());\n      });\n\n      // This can return different types of accounts: token-account, mint, multisig\n      // TODO: web3.js expose ability to filter.\n      // this should use only filter syntax to only get accounts that are owned by user\n      const tokenSubID = connection.onProgramAccountChange(\n        programIds().token,\n        (info) => {\n          // TODO: fix type in web3.js\n          const id = (info.accountId as unknown) as string;\n          // TODO: do we need a better way to identify layout (maybe a enum identifing type?)\n          if (info.accountInfo.data.length === AccountLayout.span) {\n            const data = deserializeAccount(info.accountInfo.data);\n\n            if (PRECACHED_OWNERS.has(data.owner.toBase58())) {\n              cache.add(id, info.accountInfo, TokenAccountParser);\n              setTokenAccounts(selectUserAccounts());\n            }\n          }\n        },\n        \"singleGossip\"\n      );\n\n      return () => {\n        connection.removeProgramAccountChangeListener(tokenSubID);\n      };\n    }\n  }, [connection, connected, publicKey, selectUserAccounts]);\n\n  return (\n    <AccountsContext.Provider\n      value={{\n        userAccounts,\n        nativeAccount,\n      }}\n    >\n      {children}\n    </AccountsContext.Provider>\n  );\n}\n\nexport function useNativeAccount() {\n  const context = useContext(AccountsContext);\n  return {\n    account: context.nativeAccount as AccountInfo<Buffer>,\n  };\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map((chunk) =>\n      getMultipleAccountsCore(connection, chunk, commitment)\n    )\n  );\n\n  const array = result\n    .map(\n      (a) =>\n        a.array\n          .map((acc) => {\n            if (!acc) {\n              return undefined;\n            }\n\n            const { data, ...rest } = acc;\n            const obj = {\n              ...rest,\n              data: Buffer.from(data[0], \"base64\"),\n            } as AccountInfo<Buffer>;\n            return obj;\n          })\n          .filter((_) => _) as AccountInfo<Buffer>[]\n    )\n    .flat();\n  return { keys, array };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string\n) => {\n  const args = connection._buildArgs([keys], commitment, \"base64\");\n\n  const unsafeRes = await connection._rpcRequest(\"getMultipleAccounts\", args);\n  if (unsafeRes.error) {\n    throw new Error(\n      \"failed to get info about account \" + unsafeRes.error.message\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport function useMint(key?: string | PublicKey) {\n  const connection = useConnection();\n  const [mint, setMint] = useState<MintInfo>();\n\n  const id = typeof key === \"string\" ? key : key?.toBase58();\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    cache\n      .query(connection, id, MintParser)\n      .then((acc) => setMint(acc.info as any))\n      .catch((err) => console.log(err));\n\n    const dispose = cache.emitter.onCache((e) => {\n      const event = e;\n      if (event.id === id) {\n        cache\n          .query(connection, id, MintParser)\n          .then((mint) => setMint(mint.info as any));\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, id]);\n\n  return mint;\n}\n\nexport const useAccountByMint = (mint: string) => {\n  const { userAccounts } = useUserAccounts();\n  const index = userAccounts.findIndex(\n    (acc) => acc.info.mint.toBase58() === mint\n  );\n\n  if (index !== -1) {\n    return userAccounts[index];\n  }\n\n  return;\n};\n\nexport function useAccount(pubKey?: PublicKey) {\n  const connection = useConnection();\n  const [account, setAccount] = useState<TokenAccount>();\n\n  const key = pubKey?.toBase58();\n  useEffect(() => {\n    const query = async () => {\n      try {\n        if (!key) {\n          return;\n        }\n\n        const acc = await cache\n          .query(connection, key, TokenAccountParser)\n          .catch((err) => console.log(err));\n        if (acc) {\n          setAccount(acc);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    query();\n\n    const dispose = cache.emitter.onCache((e) => {\n      const event = e;\n      if (event.id === key) {\n        query();\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, key]);\n\n  return account;\n}\n\n// TODO: expose in spl package\nconst deserializeAccount = (data: Buffer) => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\n// TODO: expose in spl package\nconst deserializeMint = (data: Buffer) => {\n  if (data.length !== MintLayout.span) {\n    throw new Error(\"Not a valid Mint\");\n  }\n\n  const mintInfo = MintLayout.decode(data);\n\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return mintInfo as MintInfo;\n};\n","import React, { useEffect, useRef } from \"react\";\n\nimport Jazzicon from \"jazzicon\";\nimport bs58 from \"bs58\";\nimport \"./style.less\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport const Identicon = (props: {\n  address?: string | PublicKey;\n  style?: React.CSSProperties;\n  className?: string;\n}) => {\n  const { style, className } = props;\n  const address =\n    typeof props.address === \"string\"\n      ? props.address\n      : props.address?.toBase58();\n  const ref = useRef<HTMLDivElement>();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.className = className || \"\";\n      ref.current.appendChild(\n        Jazzicon(\n          style?.width || 16,\n          parseInt(bs58.decode(address).toString(\"hex\").slice(5, 15), 16)\n        )\n      );\n    }\n  }, [address, style, className]);\n\n  return (\n    <div className=\"identicon-wrapper\" ref={ref as any} style={props.style} />\n  );\n};\n","import React from \"react\";\nimport { useWallet } from \"../../contexts/wallet\";\nimport { formatNumber, shortenAddress } from \"../../utils/utils\";\nimport { Identicon } from \"../Identicon\";\nimport { useNativeAccount } from \"../../contexts/accounts\";\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nexport const CurrentUserBadge = (props: {}) => {\n  const { wallet } = useWallet();\n  const { account } = useNativeAccount();\n\n  if (!wallet?.publicKey) {\n    return null;\n  }\n\n  // should use SOL ◎ ?\n\n  return (\n    <div className=\"wallet-wrapper\">\n      <span>\n        {formatNumber.format((account?.lamports || 0) / LAMPORTS_PER_SOL)} SOL\n      </span>\n      <div className=\"wallet-key\">\n        {shortenAddress(`${wallet.publicKey}`)}\n        <Identicon\n          address={wallet.publicKey.toBase58()}\n          style={{ marginLeft: \"0.5rem\", display: \"flex\" }}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Button, Select } from \"antd\";\nimport { ENDPOINTS, useConnectionConfig } from \"../../contexts/connection\";\nimport { useWallet } from \"../../contexts/wallet\";\n\nexport const Settings = () => {\n  const { connected, disconnect } = useWallet();\n  const { endpoint, setEndpoint } = useConnectionConfig();\n\n  return (\n    <>\n      <div style={{ display: \"grid\" }}>\n        Network:{\" \"}\n        <Select\n          onSelect={setEndpoint}\n          value={endpoint}\n          style={{ marginBottom: 20 }}\n        >\n          {ENDPOINTS.map(({ name, endpoint }) => (\n            <Select.Option value={endpoint} key={endpoint}>\n              {name}\n            </Select.Option>\n          ))}\n        </Select>\n        {connected && (\n          <Button type=\"primary\" onClick={disconnect}>\n            Disconnect\n          </Button>\n        )}\n      </div>\n    </>\n  );\n};\n","import { Button, Dropdown, Menu } from \"antd\";\nimport { ButtonProps } from \"antd/lib/button\";\nimport { createUninitializedMint, createTokenAccount } from \"../../actions/account\"\nimport { AccountLayout, MintLayout, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type AuthorityType from \"@solana/spl-token\";\nimport React, { useCallback } from \"react\";\nimport { LABELS } from \"../../constants\";\nimport { useWallet, WalletAdapter } from \"../../contexts/wallet\";\nimport { sendTransaction, useConnection } from \"../../contexts/connection\";\nimport { Account, Connection, Transaction, TransactionInstruction, TransactionCtorFields, PublicKey, sendAndConfirmTransaction } from \"@solana/web3.js\";\n// import { transfer } from \"@project-serum/serum/lib/token-instructions\";\nimport { SystemProgram, TransferParams} from \"@solana/web3.js\";\nimport { publicKey } from \"../../utils/layout\";\nimport { Row } from \"antd\";\nimport { notify } from \"../../utils/notifications\";\n\nexport interface ConnectButtonProps\n  extends ButtonProps,\n  React.RefAttributes<HTMLElement> {\n  allowWalletChange?: boolean;\n}\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID: PublicKey = new PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n);\n\nexport const ConnectButton = (props: ConnectButtonProps) => {\n  const { wallet, connected, connect, select, provider } = useWallet();\n  const { onClick, children, disabled, allowWalletChange, ...rest } = props;\n\n  var connection = useConnection();\n\n  var programId = new PublicKey(\"5Ds6QvdZAqwVozdu2i6qzjXm8tmBttV6uHNg4YU8rB1P\");\n\n  const menu = (\n    <Menu>\n      <Menu.Item key=\"3\" onClick={select}>\n        Change Wallet\n      </Menu.Item>\n    </Menu>\n  );\n  return (\n    <Dropdown.Button\n      onClick={connect}\n      disabled={connected && disabled}\n      overlay={menu}\n    >\n      {LABELS.CONNECT_LABEL}\n    </Dropdown.Button>\n  );\n};\n","import React from \"react\";\nimport { Button, Popover } from \"antd\";\nimport { useWallet } from \"../../contexts/wallet\";\nimport { CurrentUserBadge } from \"../CurrentUserBadge\";\nimport { SettingOutlined } from \"@ant-design/icons\";\nimport { Settings } from \"../Settings\";\nimport { LABELS } from \"../../constants\";\nimport { ConnectButton } from \"../ConnectButton\";\n\nexport const AppBar = (props: { left?: JSX.Element; right?: JSX.Element }) => {\n  const { connected } = useWallet();\n\n  const TopBar = (\n    <div tabIndex = {1} className=\"App-Bar-right\">\n      {connected ? (\n        <CurrentUserBadge />\n      ) : (\n        <ConnectButton\n          type=\"text\"\n          size=\"large\"\n          allowWalletChange={true}\n          style={{ color: \"#2abdd2\" }}\n        />\n      )}\n      <Popover\n        placement=\"topRight\"\n        title={LABELS.SETTINGS_TOOLTIP}\n        content={<Settings />}\n        trigger=\"click\"\n      >\n        <Button\n          shape=\"circle\"\n          size=\"large\"\n          type=\"text\"\n          icon={<SettingOutlined />}\n        />\n      </Popover>\n      {props.right}\n    </div>\n  );\n\n  return TopBar;\n};\n","import React from \"react\";\nimport \"./../../App.less\";\nimport { Layout } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\nimport { LABELS } from \"../../constants\";\nimport { AppBar } from \"../AppBar\";\n\nconst { Header, Content } = Layout;\n\nexport const AppLayout = React.memo((props: any) => {\n  return (\n    <div className=\"App wormhole-bg\">\n      <Layout>\n        <Header className=\"App-Bar\">\n          <Link to=\"/\">\n            <div className=\"app-title\">\n              <h2>On-chain NFT Art generator</h2>\n            </div>\n          </Link>\n          <AppBar />\n        </Header>\n        <Content style={{ padding: \"0 0px\" }}>{props.children}</Content>\n      </Layout>\n    </div>\n  );\n});\n","import { HashRouter, Route, Switch, Link } from \"react-router-dom\";\nimport React from \"react\";\nimport { WalletProvider } from \"./contexts/wallet\";\nimport { ConnectionProvider } from \"./contexts/connection\";\nimport { AccountsProvider } from \"./contexts/accounts\";\nimport { AppLayout } from \"./components/Layout\";\n\nimport { HomeView } from \"./views\";\n\nexport function Routes() {\n  return (\n    <>\n      <HashRouter basename={\"/\"}>\n        <ConnectionProvider>\n          <WalletProvider>\n              <AccountsProvider>\n                <AppLayout>\n                  <Switch>\n                    <Route exact path=\"/\" component={() => <HomeView />} />\n                  </Switch>\n                </AppLayout>\n              </AccountsProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </HashRouter>\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./App.less\";\nimport { Routes } from \"./routes\";\n\nfunction App() {\n  return <Routes />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { notification } from \"antd\";\n// import Link from '../components/Link';\n\nexport function notify({\n  message = \"\",\n  description = undefined as any,\n  txid = \"\",\n  type = \"info\",\n  placement = \"topLeft\",\n}) {\n  if (txid) {\n    //   <Link\n    //     external\n    //     to={'https://explorer.solana.com/tx/' + txid}\n    //     style={{ color: '#0000ff' }}\n    //   >\n    //     View transaction {txid.slice(0, 8)}...{txid.slice(txid.length - 8)}\n    //   </Link>\n\n    description = <></>;\n  }\n  (notification as any)[type]({\n    message: <span style={{ color: \"black\" }}>{message}</span>,\n    description: (\n      <span style={{ color: \"black\", opacity: 0.5 }}>{description}</span>\n    ),\n    placement,\n    style: {\n      backgroundColor: \"white\",\n    },\n  });\n}\n","export const LABELS = {\n  CONNECT_LABEL: \"Connect\",\n  SEND_LABEL: \"Send\",\n  TRANSACTION_2_LABEL: \"Create new card\",\n  BORROWING_POWER_USED: \"Borrowing Power Used\",\n  BORROWING_POWER_VALUE: \"Borrowing Power\",\n  BORROWED_VALUE: \"You borrowed\",\n  GIVE_SOL: \"Give me SOL\",\n  CAST_CARD: \"Cast card\",\n  CREATE_FIGHT: \"Create fight\",\n  LIQUIDATION_INFO:\n    \"This view displays all loans that can be liquidated. A liquidation is a process where borrower collateral does not cover value of the loan. It is represented by health factor falling below 1.0. When a loan is liquidated, an liquidator can purchase collateral at a discount by repaing the portio of the loan. \",\n  FAUCET_INFO:\n    \"This faucet will help you fund your accounts outside of Solana main network.\",\n  ACCOUNT_FUNDED: \"Account funded.\",\n  REPAY_QUESTION: \"How much would you like to repay?\",\n  REPAY_ACTION: \"Repay\",\n  RESERVE_STATUS_TITLE: \"Reserve Status & Configuration\",\n  AUDIT_WARNING:\n    \"Oyster is an unaudited software project used for internal purposes at the Solana Foundation. This app is not for public use.\",\n  FOOTER:\n    'This page was produced by the Solana Foundation (\"SF\") for internal educational and inspiration purposes only. SF does not encourage, induce or sanction the deployment, integration or use of Oyster or any similar application (including its code) in violation of applicable laws or regulations and hereby prohibits any such deployment, integration or use. Anyone using this code or a derivation thereof must comply with applicable laws and regulations when releasing related software.',\n  MENU_HOME: \"Home\",\n  MENU_DASHBOARD: \"Dashboard\",\n  DASHBOARD_INFO: \"Connect to a wallet to view your deposits/loans.\",\n  TRANSACTIONS_INFO: \"Connect to a wallet to view your transactions.\",\n  NO_LOANS_NO_DEPOSITS: \"No loans or deposits.\",\n  MENU_DEPOSIT: \"Deposit\",\n  DEPOSITS: \"Deposits\",\n  BORROWS: \"Borrows\",\n  LOAN_TO_VALUE: \"Loan to value\",\n  MENU_BORROW: \"Borrow\",\n  MENU_LIQUIDATE: \"Liquidate\",\n  MENU_FAUCET: \"Faucet\",\n  MENU_TRANSACTION: \"Transactions\",\n  MARGIN_TRADING: \"Margin Trading\",\n  APP_TITLE: \"Solcery\",\n  CONNECT_BUTTON: \"Connect\",\n  WALLET_TOOLTIP: \"Wallet public key\",\n  WALLET_BALANCE: \"Wallet balance\",\n  SETTINGS_TOOLTIP: \"Settings\",\n  SELECT_COLLATERAL: \"Select collateral\",\n  COLLATERAL: \"Collateral\",\n  BORROW_QUESTION: \"How much would you like to borrow?\",\n  BORROW_ACTION: \"Borrow\",\n  NO_COLLATERAL: \"No collateral\",\n  NO_DEPOSITS: \"No deposits\",\n  NO_LOANS: \"No loans\",\n  NOTHING_BORROWED: \"Nothing borrowed yet\",\n  NOTHING_BORROWED_MESSAGE:\n    \"There will be a list of all the assets you have borrowed. For now, it's empty since you have not borrowed.\",\n  BORROW_NOW: \"Borrow now\",\n  LIQUIDATE_QUESTION: \"How much would you like to liquidate?\",\n  LIQUIDATE_ACTION: \"Liquidate\",\n  LIQUIDATE_NO_LOANS: \"There are no loans to liquidate.\",\n  TABLE_TITLE_ASSET: \"Asset\",\n  TABLE_TITLE_YOUR_LOAN_BALANCE: \"Loan balance\",\n  TABLE_TITLE_LOAN_BALANCE: \"Loan balance\",\n  TABLE_TITLE_COLLATERAL_BALANCE: \"Collateral\",\n  TABLE_TITLE_DEPOSIT_BALANCE: \"Your deposits\",\n  TABLE_TITLE_APY: \"APY\",\n  TABLE_TITLE_LTV: \"LTV\",\n  TABLE_TITLE_HEALTH: \"Health Factor\",\n  TABLE_TITLE_BORROW_APY: \"Borrow APY\",\n  TABLE_TITLE_DEPOSIT_APY: \"Deposit APY\",\n  TABLE_TITLE_TOTAL_BORROWED: \"Total Borrowed\",\n  TABLE_TITLE_MARKET_SIZE: \"Market Size\",\n  TABLE_TITLE_ACTION: \"Action\",\n  TABLE_TITLE_DEPOSITS: \"Deposits\",\n  TABLE_TITLE_WITHDRAWS: \"Withdraws\",\n  TABLE_TITLE_BORROWS: \"Borrows\",\n  TABLE_TITLE_REPAY_OBLIGATIONS: \"Repay Obligations\",\n  TABLE_TITLE_LIQUIDATE_OBLIGATIONS: \"Liquidate Obligations\",\n  MAX_LTV: \"Maximum LTV\",\n  LIQUIDATION_THRESHOLD: \"Liquidation threshold\",\n  LIQUIDATION_PENALTY: \"Liquidation penalty\",\n  TABLE_TITLE_MAX_BORROW: \"Available for you\",\n  DASHBOARD_TITLE_LOANS: \"Loans\",\n  DASHBOARD_TITLE_DEPOSITS: \"Deposits\",\n  DEPOSIT_QUESTION: \"How much would you like to deposit?\",\n  WITHDRAW_ACTION: \"Withdraw\",\n  WITHDRAW_QUESTION: \"How much would you like to withdraw?\",\n  DASHBOARD_ACTION: \"Go to dashboard\",\n  GO_BACK_ACTION: \"Go back\",\n  DEPOSIT_ACTION: \"Deposit\",\n  TOTAL_TITLE: \"Total\",\n  TRADING_TABLE_TITLE_MY_COLLATERAL: \"Chosen Collateral\",\n  TRADING_TABLE_TITLE_DESIRED_ASSET: \"Desired Asset\",\n  TRADING_TABLE_TITLE_MULTIPLIER: \"Leverage\",\n  TRADING_TABLE_TITLE_ASSET_PRICE: \"Asset Price\",\n  TRADING_TABLE_TITLE_LIQUIDATION_PRICE: \"Liquidation Price\",\n  TRADING_TABLE_TITLE_APY: \"APY\",\n  TRADING_TABLE_TITLE_ACTIONS: \"Action\",\n  TRADING_ADD_POSITION: \"Add Position\",\n  MARGIN_TRADE_ACTION: \"Margin Trade\",\n  MARGIN_TRADE_CHOOSE_COLLATERAL_AND_LEVERAGE:\n    \"Please choose your collateral and leverage.\",\n  MARGIN_TRADE_QUESTION:\n    \"Please choose how much of this asset you wish to purchase.\",\n  TABLE_TITLE_BUYING_POWER: \"Total Buying Power\",\n  NOT_ENOUGH_MARGIN_MESSAGE:\n    \"Not enough buying power in oyster to make this trade at this leverage.\",\n  SET_MORE_MARGIN_MESSAGE:\n    \"You need more margin to match this leverage amount to make this trade.\",\n  LEVERAGE_LIMIT_MESSAGE: \"You will need more margin to make this trade.\",\n  NO_DEPOSIT_MESSAGE:\n    \"You need to deposit coin of this type into oyster before trading with it on margin.\",\n  NO_COLL_TYPE_MESSAGE: \"Choose Collateral CCY\",\n  SAFER: \"Safer\",\n  RISKIER: \"Riskier\",\n};\n","import BN from \"bn.js\";\n\nexport const TEN = new BN(10);\nexport const HALF_WAD = TEN.pow(new BN(18));\nexport const WAD = TEN.pow(new BN(18));\nexport const RAY = TEN.pow(new BN(27));\nexport const ZERO = new BN(0);\nexport const LAMPORTS_PER_SOL = 1000000000;\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\nexport let TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nexport let LENDING_PROGRAM_ID = new PublicKey(\n  \"TokenLending1111111111111111111111111111111\"\n);\n\nexport let SWAP_PROGRAM_ID = new PublicKey(\n  \"SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8\"\n);\n\nexport const PROGRAM_IDS = [\n  {\n    name: \"mainnet-beta\",\n  },\n  {\n    name: \"testnet\",\n  },\n  {\n    name: \"devnet\",\n  },\n  {\n    name: \"localnet\",\n  },\n];\n\nexport const setProgramIds = (envName: string) => {\n  let instance = PROGRAM_IDS.find((env) => env.name === envName);\n  if (!instance) {\n    return;\n  }\n};\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n  };\n};\n","const ipfsClient = require('ipfs-api');\nconst ipfs = new ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\n\nexport default ipfs;\n","import ipfs from '../ipfs/ipfs';\n\nexport const getTextIpfsHash = async (data: string) => {\n  const content = await ipfs.Buffer.from(data);\n  const result = await ipfs.add(content);\n  const hash = await result[0].hash;\n  console.log(hash);\n  return hash;\n};\n\nexport const getImageIpfsHash = async (data: ArrayBuffer) => {\n  const result = await ipfs.files.add(data);\n  const hash = await result[0].hash;\n  return hash;\n};\n","import React, { useCallback,useState } from \"react\";\nimport { getImageIpfsHash } from '../../utils/getIpfsHash';\n\nimport { useConnection, sendTransaction} from \"../../contexts/connection\";\nimport { useWallet } from \"../../contexts/wallet\";\nimport { LAMPORTS_PER_SOL,\n   PublicKey,\n   Account, \n  TransactionInstruction,\n  SystemProgram } from \"@solana/web3.js\";\nimport { ConnectButton } from \"./../../components/ConnectButton\";\nimport { LABELS } from \"../../constants\";\nimport {\n  sendTransactionWithRetry\n} from '@oyster/common';\nimport { AccountLayout, MintLayout, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  deserializeUnchecked, BinaryReader, BinaryWriter, serialize\n} from 'borsh';\nimport { useParams } from \"react-router-dom\";\n\nimport axios from \"axios\";\n\nimport { Button, Input,Col, Row, InputNumber  } from \"antd\";\nimport { SSL_OP_SSLEAY_080_CLIENT_DH_BUG } from \"constants\";\nimport { Readable } from 'stream';\n\nimport FormData from 'form-data';\n\nexport async function onWalletConnected() {}\n\n\n\nexport const HomeView = () => {\n  const [png, setPng] = useState<string | null>(null)\n  const [name, setName] = useState<string | null>(null)\n\n  const [load, setLoad] = useState<boolean>(true);\n\n  // var loaded = false\n  const connection = useConnection();\n  const { wallet } = useWallet();\n\n  const programId = new PublicKey(\"DABc9T6PSUuhfAYwnTqRrhpGENTDGpxnZHyCaqfsAe71\");\n  const creatorId = new PublicKey(\"FdWnQ6zLSCmJiBPPC9dHD2PM9KvMzYzLaS2Mj4wXTdAH\");\n\n  const metaplexProgramId = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n  const systemProgramId = new PublicKey(\"11111111111111111111111111111111\");\n  const sysvarRentAccountPublicKey = new PublicKey(\"SysvarRent111111111111111111111111111111111\");\n  const tokenProgramId = new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\");\n  const associatedTokenProgramId = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\n\n\n  var seed_input = 0;\n//@ts-ignore\n  function concatBuffer(bufs) {//@ts-ignore\n    var len = bufs.reduce(function(a, b) { return a.length + b.length })\n      , buf = new Buffer(len)\n      , start = 0;\n  //@ts-ignore\n    bufs.forEach(function(chunk) {\n      chunk.copy(buf, start, 0);\n      start += chunk.length;\n    });\n  \n    return buf;\n  }\n\n\n  const tx3 = async () => {\n    if (wallet === undefined) {\n      return;\n    }\n    var publicKey = wallet.publicKey\n    if (!publicKey) {\n      return;\n    }\n    console.log(\"tx3\",seed_input);\n    \n    var accounts : Account[] = [];\n    var instructions = [];\n    const MINT_SEED = Buffer.from(\"mint\", \"utf8\");\n    const MINT_ACCT_SIZE=82;//TODO;\n    var cntPayPublicKeyNonce = await PublicKey.findProgramAddress([\n      Buffer.from(\"cnt_pay\", \"utf8\")\n    ], programId);\n    var cntPayPublicKey = cntPayPublicKeyNonce[0];\n    console.log(cntPayPublicKey);\n  \n    var cntMetaPublicKeyNonce = await PublicKey.findProgramAddress([\n      Buffer.from(\"cnt_meta\", \"utf8\"),\n    ], programId);\n    var cntMetaPublicKey = cntMetaPublicKeyNonce[0];\n    console.log(cntMetaPublicKey);\n  \n    const instructionInit = new TransactionInstruction({\n      keys: [\n        {pubkey:publicKey,isSigner:true, isWritable:true},\n        {pubkey: cntPayPublicKey, isSigner: false, isWritable: true},\n        {pubkey: cntMetaPublicKey, isSigner: false, isWritable: true},\n        {pubkey:systemProgramId,isSigner:false, isWritable:false},],\n      programId,\n      data: Buffer.from([0xff])\n    });\n    instructions.push(instructionInit);\n\n    sendTransaction(connection, wallet!, instructions, accounts).then(() => {}, () => {})\n  \n    console.log(\"send\")\n  };\n\n  const tx2 = async () => {\n    if (wallet === undefined) {\n      return;\n    }\n    var publicKey = wallet.publicKey\n    if (!publicKey) {\n      return;\n    }\n    console.log(\"Upload & update metadata\",seed_input);\n    \n    var accounts : Account[] = [];\n    var instructions = [];\n    const MINT_SEED = Buffer.from(\"mint\", \"utf8\");\n    const MINT_ACCT_SIZE=82;//TODO;\n\n    var tokenMintAccountPublicKeyNonce = await PublicKey.findProgramAddress([\n      Buffer.from(\"mint\", \"utf8\"), \n      publicKey.toBuffer(),\n      Buffer.from([seed_input])\n    ], programId);\n    var tokenMintAccountPublicKey = tokenMintAccountPublicKeyNonce[0];\n\n    var mintProgPublicKeyNonce = await PublicKey.findProgramAddress([\n      Buffer.from(\"mint\", \"utf8\"), \n      tokenMintAccountPublicKey.toBuffer()\n    ], programId);\n    var mintProgPublicKey = mintProgPublicKeyNonce[0];\n\n    var metadataAccountPublicKeyNonce = await PublicKey.findProgramAddress([\n      Buffer.from(\"metadata\", \"utf8\"), \n      metaplexProgramId.toBuffer(), \n      tokenMintAccountPublicKey.toBuffer()\n    ], metaplexProgramId);\n    var metadataAccountPublicKey = metadataAccountPublicKeyNonce[0];\n\n    console.log(metadataAccountPublicKey.toBase58());\n    console.log(\"fetch metadata from getaccountinfo\")\n    const metadata = await connection.getAccountInfo(metadataAccountPublicKey);\n    if (metadata === null){\n      console.log(\"failed to fetch\")\n      return; \n    };\n    const metadata_u8 = metadata.data;\n\n\n    const tokenname= metadata_u8.toString(\"ascii\",1+32*2+4, 1+32*2+4+28);\n    console.log(tokenname);\n    setName(tokenname);\n    const tokensymbol= metadata_u8.toString(\"ascii\",1+32*2+27+13,1+32*2+27+13+3);\n    console.log(tokensymbol);\n    setName(tokensymbol);\n\n    const pgm = metadata_u8.subarray(119,119+172);\n    console.log(\"pgm file, \",pgm);\n    \n    const base64str = Buffer.from(pgm).toString();\n    const pgm_data = Buffer.from(base64str,'base64');\n    const pgm_image = pgm_data;//.subarray(11);\n    console.log(\"pgm_im:\",pgm_image)\n  \n    \n    const scale = 10;\n    var imgdata = new Uint8ClampedArray(8*8*4*scale*scale);\n    for (var i = 0; i < 64; i++){\n      var ix = i%8;\n      var iy = Math.floor(i/8);\n      for(var y =0; y<scale; y++){\n        for (var x = 0; x<scale; x++){\n            imgdata[iy*320*10+ y*320+ix*scale*4+ x*4 + 1] = (pgm_image[i*2] & 0x0f) * 17;\n            imgdata[iy*320*10+ y*320+ix*scale*4+ x*4 + 0] = ((pgm_image[i*2]>>4)&0x0f) * 17;\n            imgdata[iy*320*10+ y*320+ix*scale*4+ x*4 + 3] = (pgm_image[i*2+1] & 0x0f) * 17;\n            imgdata[iy*320*10+ y*320+ix*scale*4+ x*4 + 2] =((pgm_image[i*2+1]>>4)&0x0f) * 17;\n          }\n        }\n    }\n    // create ImageData instance\n  \n    var canvas = document.createElement('canvas');\n    canvas.width = canvas.height = 80;\n    var ctx = canvas.getContext('2d');\n    if (ctx === null){\n      return;\n    }\n    var image = new ImageData(imgdata, ctx.canvas.width, ctx.canvas.height);\n    ctx.putImageData(image,0,0);\n    console.log(\"put image data on ctx\",image);\n\n    var type = 'image/png';\n    // canvas から DataURL で画像を出力\n    var dataurl = canvas.toDataURL(type);\n    console.log(\"dataurl\",dataurl);\n    const png_data = Buffer.from(dataurl.split(',')[1],'base64');\n    console.log(\"pngdata\",png_data);\n\n    setPng(dataurl);\n    const hash_img: string = await getImageIpfsHash(png_data);\n    const uri_img = \"https://ipfs.io/ipfs/\"+ hash_img\n\n    console.log(uri_img);\n    const metadataContent = {\n      name: tokenname,\n      symbol: tokensymbol,\n      description: \"Fully on-chain generative pixel art.\",\n      seller_fee_basis_points: 500,\n      collection:\"Generation 0\",\n      image: uri_img,\n      animation_url: '',\n      attributes: [],\n      external_url: '',\n      properties: {\n        files:[{uri:uri_img,type:\"image/png\"}],\n        category: \"image\",\n        creators: [{\n            address: \"FdWnQ6zLSCmJiBPPC9dHD2PM9KvMzYzLaS2Mj4wXTdAH\",\n            share: 100,\n          }]\n        },\n    };\n    const metadata_json = JSON.stringify(metadataContent);\n    const manifestBuffer = Buffer.from(metadata_json);\n    \n\n\n    console.log('submitted...');\n    const hash: string = await getImageIpfsHash(manifestBuffer);\n\n    const uri_ipfs = \"https://ipfs.io/ipfs/\"+ hash;\n\n    console.log(uri_ipfs);\n    \n\n    const instructionUpdate = new TransactionInstruction({\n      keys: [\n        {pubkey: metaplexProgramId, isSigner: false, isWritable: false},\n        {pubkey:tokenMintAccountPublicKey,isSigner:false, isWritable:false},\n        {pubkey: mintProgPublicKey, isSigner: false, isWritable: true},\n        {pubkey: metadataAccountPublicKey, isSigner: false, isWritable: true},\n        {pubkey: publicKey, isSigner: true, isWritable: true},\n        {pubkey: systemProgramId, isSigner: false, isWritable: false},],\n      programId,\n      data: concatBuffer([\n        Buffer.from([0x02]),\n        Buffer.from(uri_ipfs),\n      ])\n        \n    });\n      \n    //sendTransaction(connection, wallet!, instructions, accounts).then(() => {}, () => {})\n    {\n      const { txid } = await sendTransactionWithRetry(\n        connection,\n        wallet,\n        [instructionUpdate],\n        accounts,\n      );\n\n      try { \n        await connection.confirmTransaction(txid, 'max');\n      } catch {\n        // ignore\n      }\n      console.log(\"Metadata update Tx sent\",txid);\n    }\n    \n\n  };\n  \n\n  const setSeed = async(value:any) => {\n    seed_input =value;\n  };\n\n  type ViewParams = {\n    page: string;\n  };\n\n  const loadAll = async() => {\n    \n  }\n\n  const tx1 = async () => {\n    if (wallet === undefined) {\n      return;\n    }\n    var publicKey = wallet.publicKey\n    if (!publicKey) {\n      return;\n    }\n\n    var accounts : Account[] = [];\n    var instructions = [];\n\n    const MINT_SEED = Buffer.from(\"mint\", \"utf8\");\n    const MINT_ACCT_SIZE=82;//TODO;\n    var tokenMintAccountPublicKeyNonce = await PublicKey.findProgramAddress([\n      Buffer.from(\"mint\", \"utf8\"), \n      publicKey.toBuffer(),\n      Buffer.from([seed_input])\n    ], programId);\n    var tokenMintAccountPublicKey = tokenMintAccountPublicKeyNonce[0];\n  \n    var mintProgPublicKeyNonce = await PublicKey.findProgramAddress([\n      Buffer.from(\"mint\", \"utf8\"), \n      tokenMintAccountPublicKey.toBuffer()\n    ], programId);\n    var mintProgPublicKey = mintProgPublicKeyNonce[0];\n    \n  \n    //Derive Associated account pubkey\n    var associatedAccountPublicKey = await Token.getAssociatedTokenAddress(\n      associatedTokenProgramId,\n      tokenProgramId,\n      tokenMintAccountPublicKey,\n      publicKey,\n    );\n\n    var cntPayPublicKeyNonce = await PublicKey.findProgramAddress([\n      Buffer.from(\"cnt_pay\", \"utf8\")\n    ], programId);\n    var cntPayPublicKey = cntPayPublicKeyNonce[0];\n    console.log(cntPayPublicKey.toBase58());\n\n    const instructionPay = new TransactionInstruction({\n      keys: [{pubkey: cntPayPublicKey, isSigner: false, isWritable: true},\n        {pubkey: publicKey, isSigner: true, isWritable: true},\n        {pubkey: creatorId, isSigner: false, isWritable: true},\n        {pubkey: programId, isSigner: false, isWritable: false},\n        {pubkey:systemProgramId,isSigner:false, isWritable:false},\n        {pubkey:tokenProgramId,isSigner:false, isWritable:false},\n        {pubkey:sysvarRentAccountPublicKey,isSigner:false, isWritable:false},\n        {pubkey:tokenMintAccountPublicKey,isSigner:false, isWritable:true},\n        {pubkey:mintProgPublicKey,isSigner:false, isWritable:true},\n        {pubkey:associatedTokenProgramId,isSigner:false, isWritable:false},\n        {pubkey:associatedAccountPublicKey  ,isSigner:false, isWritable:true}],\n      programId,\n      data: Buffer.from([0x00,seed_input])//Buffer.alloc(0), // All instructions are hellos\n    });\n    instructions.push(instructionPay);\n\n\n    var metadataAccountPublicKeyNonce = await PublicKey.findProgramAddress([\n      Buffer.from(\"metadata\", \"utf8\"), \n      metaplexProgramId.toBuffer(), \n      tokenMintAccountPublicKey.toBuffer()\n    ], metaplexProgramId);\n    var metadataAccountPublicKey = metadataAccountPublicKeyNonce[0];\n\n    var editionAccountPublicKeyNonce = await PublicKey.findProgramAddress([\n      Buffer.from(\"metadata\", \"utf8\"), \n      metaplexProgramId.toBuffer(), \n      tokenMintAccountPublicKey.toBuffer(),\n      Buffer.from(\"edition\", \"utf8\"), \n    ], metaplexProgramId);\n    var editionAccountPublicKey = editionAccountPublicKeyNonce[0];\n\n    var cntMetaPublicKeyNonce = await PublicKey.findProgramAddress([\n      Buffer.from(\"cnt_meta\", \"utf8\"),\n    ], programId);\n    var cntMetaPublicKey = cntMetaPublicKeyNonce[0];\n    console.log(cntMetaPublicKey.toBase58());\n\n    const instructionMeta = new TransactionInstruction({\n      keys: [{pubkey: cntMetaPublicKey, isSigner: false, isWritable: true},\n        {pubkey: metaplexProgramId, isSigner: false, isWritable: false},\n        {pubkey: metadataAccountPublicKey, isSigner: false, isWritable: true},\n        {pubkey:tokenMintAccountPublicKey,isSigner:false, isWritable:false},\n        {pubkey:mintProgPublicKey,isSigner:false, isWritable:false},\n        {pubkey:publicKey,isSigner:true, isWritable:false},\n        {pubkey: mintProgPublicKey, isSigner: false, isWritable: false},\n        {pubkey: editionAccountPublicKey, isSigner: false, isWritable: true},\n        {pubkey:systemProgramId,isSigner:false, isWritable:false},\n        {pubkey:tokenProgramId,isSigner:false, isWritable:false},\n        {pubkey:sysvarRentAccountPublicKey,isSigner:false, isWritable:false}],\n      programId,\n      data: Buffer.from([0x01])\n    });\n    instructions.push(instructionMeta);\n      \n    \n    setLoad(false);\n    //sendTransaction(connection, wallet!, instructions, accounts).then(() => {}, () => {})\n    const { txid } = await sendTransactionWithRetry(\n      connection,\n      wallet,\n      instructions,\n      accounts,\n    );\n\n    try { \n      await connection.confirmTransaction(txid, 'max');\n    } catch {\n      // ignore\n    }\n    console.log(\"Mint transaction sent\",txid);\n    await connection.getParsedConfirmedTransaction(txid, 'confirmed');\n    const metadata = await connection.getAccountInfo(metadataAccountPublicKey);\n    if (metadata === null){\n      return; \n    };\n    const metadata_u8 = metadata.data;\n\n    const tokenname= metadata_u8.toString(\"ascii\",1+32*2+4, 1+32*2+4+28);\n    console.log(tokenname);\n    setName(tokenname);\n    const tokensymbol= metadata_u8.toString(\"ascii\",1+32*2+27+13,1+32*2+27+13+3);\n    console.log(tokensymbol);\n    setName(tokensymbol);\n\n    const pgm = metadata_u8.subarray(119,119+172);\n    console.log(\"image data, \",pgm);\n    \n    const base64str = Buffer.from(pgm).toString();\n    const pgm_data = Buffer.from(base64str,'base64');\n    const pgm_image = pgm_data;//.subarray(11);\n    console.log(\"pgm_im:\",pgm_image)\n    \n    const scale = 10;\n    var imgdata = new Uint8ClampedArray(8*8*4*scale*scale);\n    for (var i = 0; i < 64; i++){\n      var ix = i%8;\n      var iy = Math.floor(i/8);\n      for(var y =0; y<scale; y++){\n        for (var x = 0; x<scale; x++){\n            imgdata[iy*320*10+ y*320+ix*scale*4+ x*4 + 1] = (pgm_image[i*2] & 0x0f) * 17;\n            imgdata[iy*320*10+ y*320+ix*scale*4+ x*4 + 0] = ((pgm_image[i*2]>>4)&0x0f) * 17;\n            imgdata[iy*320*10+ y*320+ix*scale*4+ x*4 + 3] = (pgm_image[i*2+1] & 0x0f) * 17;\n            imgdata[iy*320*10+ y*320+ix*scale*4+ x*4 + 2] =((pgm_image[i*2+1]>>4)&0x0f) * 17;\n          }\n        }\n    }\n    // create ImageData instance\n  \n    var canvas = document.createElement('canvas');\n    canvas.width = canvas.height = 80;\n    var ctx = canvas.getContext('2d');\n    if (ctx === null){\n      return;\n    }\n    var image = new ImageData(imgdata, ctx.canvas.width, ctx.canvas.height);\n    ctx.putImageData(image,0,0);\n    console.log(\"put image data on ctx\",image);\n\n    var type = 'image/png';\n    // canvas から DataURL で画像を出力\n    var dataurl = canvas.toDataURL(type);\n    console.log(\"dataurl\",dataurl);\n    const png_data = Buffer.from(dataurl.split(',')[1],'base64');\n    console.log(\"pngdata\",png_data);\n\n    setPng(dataurl);\n\n    console.log('submitted...');\n    const hash_img: string = await getImageIpfsHash(png_data);\n    const uri_img = \"https://ipfs.io/ipfs/\"+ hash_img\n\n    console.log(uri_img);\n    const metadataContent = {\n      name: tokenname,\n      symbol: tokensymbol,\n      description: \"Fully on-chain generative pixel art.\",\n      seller_fee_basis_points: 500,\n      collection:\"Generation 0\",\n      image: uri_img,\n      animation_url: '',\n      attributes: [],\n      external_url: '',\n      properties: {\n        files:[{uri:uri_img,type:\"image/png\"}],\n        category: \"image\",\n        creators: [{\n            address: \"FdWnQ6zLSCmJiBPPC9dHD2PM9KvMzYzLaS2Mj4wXTdAH\",\n            share: 100,\n          }]\n        },\n    };\n    const metadata_json = JSON.stringify(metadataContent);\n    const manifestBuffer = Buffer.from(metadata_json);\n\n    console.log('upload json metadata...');\n    const hash: string = await getImageIpfsHash(manifestBuffer);\n\n    const uri_ipfs = \"https://ipfs.io/ipfs/\"+ hash\n    console.log(uri_ipfs)\n\n  \n    const instructionUpdate = new TransactionInstruction({\n      keys: [\n        {pubkey: metaplexProgramId, isSigner: false, isWritable: false},\n        {pubkey:tokenMintAccountPublicKey,isSigner:false, isWritable:false},\n        {pubkey: mintProgPublicKey, isSigner: false, isWritable: false},\n        {pubkey: metadataAccountPublicKey, isSigner: false, isWritable: true},\n        {pubkey: publicKey, isSigner: true, isWritable: true},\n        {pubkey: systemProgramId, isSigner: false, isWritable: false},],\n      programId,\n      data: concatBuffer([\n        Buffer.from([0x02]),\n        Buffer.from(uri_ipfs),\n      ])\n      \n    });\n    \n    //sendTransaction(connection, wallet!, instructions, accounts).then(() => {}, () => {})\n    {\n      const { txid } = await sendTransactionWithRetry(\n        connection,\n        wallet,\n        [instructionUpdate],\n        accounts,\n      );\n\n      try { \n        await connection.confirmTransaction(txid, 'max');\n      } catch {\n        // ignore\n      }\n      console.log(\"metadata update Tx sent\",txid);\n    }\n    setLoad(true);\n    \n  }\n\n  let { page } = useParams<ViewParams>();\n  //let x = loadAll()\n\n  return (\n      <Row gutter={[16, 16]} align=\"middle\">\n        <Col span={24}>\n          <h1>オンチェインNFTジェネレータ on Solana</h1>\n          <img src = \"generative.gif\"></img>\n\n          <h3>シードに0から99の値を入力してMINTボタンをクリック、</h3><h3>2回トランザクション承認が出るのでそこまで放置（1,2分くらい） </h3>\n          <h3>ガス代的な感じで0.01-0.02 SOLぐらい使います。</h3><h3>同じシードは再利用できないので1つのウォレットで最大100個mintできます。</h3>\n        </Col>\n        <Col span={24}>\n          {png && (\n            <img alt=\"icon\" src={png} />\n          )}\n          {load ? <></> : <h1>Processing...</h1>}\n        </Col>\n        <Col span={24}>\n          シード値: \n          <InputNumber min={0} max={99} defaultValue={0} \n            onChange={value => setSeed(value)}\n            />\n          <Button onClick={() => tx1()}>MINT</Button>\n          <h3>Processingが表示されてる間は実行中なので待ってください（途中で中断されます）</h3>\n          </Col>\n          <Col span={2}>\n          </Col>\n          <Col span={20}>\n          <h3>\n            MINTを押すと、1つ目のトランザクションで画像をメタデータ内に含んだトークンを発行します。</h3>\n          <h3>その画像をIPFSにアップロードし、2つ目のトランザクションでメタデータをアップデートします。</h3>\n            <h3>その他詳細は気が向いたらそのうち上げる（かも）\n            </h3>\n            <a href=\"https://twitter.com/ek_ss\">@ek_ss(twitter)</a>\n          </Col>\n          <Col span={2}>\n          </Col>\n        <Col span={24}>\n          <h2>Txが中断されて画像が正常に表示されない時のためのUpdateMetadataボタン</h2>\n          <h3>シード値をあわせてから押す。</h3>\n          <h3>ユーザ側からは一度しか更新できないので更新済みになってる場合は適当に連絡ください。</h3>\n          <Button onClick={() => tx2()}>UpdateMetadata</Button>\n        </Col>\n      </Row>\n  );\n  /*          <Col span={6}>\n          </Col>\n        <Col span={12}>\n          <h2>test update meta via admin</h2>\n          <Button onClick={() => tx6()}>UpdateMetadata</Button>\n        </Col>\n        <Col span={12}>\n          <h2>init counter(admin)</h2>\n          <Button onClick={() => tx3()}>Tx 2</Button>\n        </Col>\n        */ \n};\n","import { EventEmitter as Emitter } from \"eventemitter3\";\n\nexport class CacheUpdateEvent {\n  static type = \"CacheUpdate\";\n  id: string;\n  parser: any;\n  isNew: boolean;\n  constructor(id: string, isNew: boolean, parser: any) {\n    this.id = id;\n    this.parser = parser;\n    this.isNew = isNew;\n  }\n}\n\nexport class CacheDeleteEvent {\n  static type = \"CacheUpdate\";\n  id: string;\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport class MarketUpdateEvent {\n  static type = \"MarketUpdate\";\n  ids: Set<string>;\n  constructor(ids: Set<string>) {\n    this.ids = ids;\n  }\n}\n\nexport class CacheClearEvent {\n  static type = \"CacheDelete\";\n}\n\nexport class EventEmitter {\n  private emitter = new Emitter();\n\n  onMarket(callback: (args: MarketUpdateEvent) => void) {\n    this.emitter.on(MarketUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(MarketUpdateEvent.type, callback);\n  }\n\n  onCache(callback: (args: CacheUpdateEvent) => void) {\n    this.emitter.on(CacheUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(CacheUpdateEvent.type, callback);\n  }\n\n  raiseMarketUpdated(ids: Set<string>) {\n    this.emitter.emit(MarketUpdateEvent.type, new MarketUpdateEvent(ids));\n  }\n\n  raiseCacheUpdated(id: string, isNew: boolean, parser: any) {\n    this.emitter.emit(\n      CacheUpdateEvent.type,\n      new CacheUpdateEvent(id, isNew, parser)\n    );\n  }\n\n  raiseCacheDeleted(id: string) {\n    this.emitter.emit(CacheDeleteEvent.type, new CacheDeleteEvent(id));\n  }\n\n  raiseCacheCleared() {\n    this.emitter.emit(CacheClearEvent.type, new CacheClearEvent());\n  }\n}\n","import { TokenAccount } from \"../models\";\nimport { useAccountsContext } from \"./../contexts/accounts\";\n\nexport function useUserAccounts() {\n  const context = useAccountsContext();\n  return {\n    userAccounts: context.userAccounts as TokenAccount[],\n  };\n}\n","import React from \"react\";\nimport { Typography } from \"antd\";\nimport { shortenAddress } from \"../../utils/utils\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport const ExplorerLink = (props: {\n  address: string | PublicKey;\n  type: string;\n  code?: boolean;\n  style?: React.CSSProperties;\n  length?: number;\n}) => {\n  const { type, code } = props;\n\n  const address =\n    typeof props.address === \"string\"\n      ? props.address\n      : props.address?.toBase58();\n\n  if (!address) {\n    return null;\n  }\n\n  const length = props.length ?? 9;\n\n  return (\n    <a\n      href={`https://explorer.solana.com/${type}/${address}`}\n      // eslint-disable-next-line react/jsx-no-target-blank\n      target=\"_blank\"\n      title={address}\n      style={props.style}\n    >\n      {code ? (\n        <Typography.Text style={props.style} code>\n          {shortenAddress(address, length)}\n        </Typography.Text>\n      ) : (\n        shortenAddress(address, length)\n      )}\n    </a>\n  );\n};\n","import { useLocalStorageState } from \"./../utils/utils\";\nimport {\n  Account,\n  clusterApiUrl,\n  Connection,\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport { notify } from \"./../utils/notifications\";\nimport { ExplorerLink } from \"../components/ExplorerLink\";\nimport { setProgramIds } from \"../utils/ids\";\nimport { WalletAdapter } from \"./wallet\";\nimport { cache, getMultipleAccounts, MintParser } from \"./accounts\";\nimport { TokenListProvider, ENV as ChainID, TokenInfo } from \"@solana/spl-token-registry\";\n\nexport type ENV =\n  | \"mainnet-beta\"\n  // | \"testnet\"\n  | \"devnet\"\n  | \"localnet\";\n\nexport const ENDPOINTS = [\n  {\n    name: \"mainnet-beta\" as ENV,\n    endpoint: \"https://api.mainnet-beta.solana.com\",\n    chainID: ChainID.MainnetBeta,\n  },\n  // {\n  //   name: \"testnet\" as ENV,\n  //   endpoint: clusterApiUrl(\"testnet\"),\n  //   chainID: ChainID.Testnet,\n  // },\n  {\n    name: \"devnet\" as ENV,\n    endpoint: clusterApiUrl(\"devnet\"),\n    chainID: ChainID.Devnet,\n  },\n  {\n    name: \"localnet\" as ENV,\n    endpoint: \"http://127.0.0.1:8899\",\n    chainID: ChainID.Devnet,\n  },\n];\n\nconst DEFAULT = ENDPOINTS[0].endpoint;\nconst DEFAULT_SLIPPAGE = 0.25;\n\ninterface ConnectionConfig {\n  connection: Connection;\n  sendConnection: Connection;\n  endpoint: string;\n  slippage: number;\n  setSlippage: (val: number) => void;\n  env: ENV;\n  setEndpoint: (val: string) => void;\n  tokens: TokenInfo[];\n  tokenMap: Map<string, TokenInfo>;\n}\n\nconst ConnectionContext = React.createContext<ConnectionConfig>({\n  endpoint: DEFAULT,\n  setEndpoint: () => {},\n  slippage: DEFAULT_SLIPPAGE,\n  setSlippage: (val: number) => {},\n  connection: new Connection(DEFAULT, \"recent\"),\n  sendConnection: new Connection(DEFAULT, \"recent\"),\n  env: ENDPOINTS[0].name,\n  tokens: [],\n  tokenMap: new Map<string, TokenInfo>(),\n});\n\nexport function ConnectionProvider({ children = undefined as any }) {\n  const [endpoint, setEndpoint] = useLocalStorageState(\n    \"connectionEndpts\",\n    ENDPOINTS[0].endpoint\n  );\n\n  const [slippage, setSlippage] = useLocalStorageState(\n    \"slippage\",\n    DEFAULT_SLIPPAGE.toString()\n  );\n\n  const connection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n  const sendConnection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n\n  const chain =\n    ENDPOINTS.find((end) => end.endpoint === endpoint) || ENDPOINTS[0];\n  const env = chain.name;\n\n  const [tokens, setTokens] = useState<TokenInfo[]>([]);\n  const [tokenMap, setTokenMap] = useState<Map<string, TokenInfo>>(new Map());\n  useEffect(() => {\n    cache.clear();\n    // fetch token files\n    (async () => {\n      const res = await new TokenListProvider().resolve();\n      const list = res\n        .filterByChainId(chain.chainID)\n        .excludeByTag(\"nft\")\n        .getList();\n      const knownMints = list.reduce((map, item) => {\n        map.set(item.address, item);\n        return map;\n      }, new Map<string, TokenInfo>());\n\n      const accounts = await getMultipleAccounts(connection, [...knownMints.keys()], 'single');\n      accounts.keys.forEach((key, index) => {\n        const account = accounts.array[index];\n        if(!account) {\n          return;\n        }\n\n        cache.add(new PublicKey(key), account, MintParser);\n      })\n\n      setTokenMap(knownMints);\n      setTokens(list);\n    })();\n  }, [connection, chain]);\n\n  setProgramIds(env);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(new Account().publicKey, () => {});\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = sendConnection.onAccountChange(\n      new Account().publicKey,\n      () => {}\n    );\n    return () => {\n      sendConnection.removeAccountChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  useEffect(() => {\n    const id = sendConnection.onSlotChange(() => null);\n    return () => {\n      sendConnection.removeSlotChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        slippage: parseFloat(slippage),\n        setSlippage: (val) => setSlippage(val.toString()),\n        connection,\n        sendConnection,\n        tokens,\n        tokenMap,\n        env,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  return useContext(ConnectionContext).connection as Connection;\n}\n\nexport function useSendConnection() {\n  return useContext(ConnectionContext)?.sendConnection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env,\n    tokens: context.tokens,\n    tokenMap: context.tokenMap,\n  };\n}\n\nexport function useSlippageConfig() {\n  const { slippage, setSlippage } = useContext(ConnectionContext);\n  return { slippage, setSlippage };\n}\n\nconst getErrorForTransaction = async (connection: Connection, txid: string) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: WalletAdapter,\n  instructions: TransactionInstruction[],\n  signers: Account[],\n  awaitConfirmation = true,\n  onSignInWallet? : () => any,\n  onRejectInWallet? : () => any\n) => {\n  if (!wallet?.publicKey) {\n    throw new Error(\"Wallet is not connected\");\n  }\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash(\"max\")\n  ).blockhash;\n  transaction.setSigners(\n    // fee payied by the wallet owner\n    wallet.publicKey,\n    ...signers.map((s) => s.publicKey)\n  );\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  await wallet.signTransaction(transaction).then(async (t) => {\n    if (onSignInWallet) onSignInWallet();\n    transaction = t;\n    const rawTransaction = transaction.serialize();\n    let options = {\n      skipPreflight: true,\n      commitment: \"singleGossip\",\n    };\n  \n    const txid = await connection.sendRawTransaction(rawTransaction, options);\n  \n    if (awaitConfirmation) {\n      const status = (\n        await connection.confirmTransaction(\n          txid,\n          options && (options.commitment as any)\n        )\n      ).value;\n  \n      if (status?.err) {\n        const errors = await getErrorForTransaction(connection, txid);\n        notify({\n          message: \"Transaction failed...\",\n          description: (\n            <>\n              {errors.map((err) => (\n                <div>{err}</div>\n              ))}\n              <ExplorerLink address={txid} type=\"transaction\" />\n            </>\n          ),\n          type: \"error\",\n        });\n  \n        throw new Error(\n          `Raw transaction ${txid} failed (${JSON.stringify(status)})`\n        );\n      }\n    }\n  \n    return txid;\n  },\n  );\n};\n","import { WalletAdapter } from \"../../contexts/wallet\";\nimport EventEmitter from 'eventemitter3'\nimport { PublicKey, Transaction } from '@solana/web3.js'\nimport { notify } from \"../../utils/notifications\";\n\ntype PhantomEvent = 'disconnect' | 'connect'\ntype PhantomRequestMethod = 'connect' | 'disconnect' | 'signTransaction' | 'signAllTransactions'\n\ninterface PhantomProvider {\n  publicKey?: PublicKey\n  isConnected?: boolean\n  autoApprove?: boolean\n  signTransaction: (transaction: Transaction) => Promise<Transaction>\n  signAllTransactions: (transactions: Transaction[]) => Promise<Transaction[]>\n  connect: () => Promise<void>\n  disconnect: () => Promise<void>\n  on: (event: PhantomEvent, handler: (args: any) => void) => void\n  request: (method: PhantomRequestMethod, params: any) => Promise<any>\n  listeners: (event: PhantomEvent) => (() => void)[]\n}\n\nexport class PhantomWalletAdapter extends EventEmitter implements WalletAdapter {\n\n  constructor() {\n    super()\n    this.connect = this.connect.bind(this)\n  }\n\n  private get _provider(): PhantomProvider | undefined {\n    if ((window as any)?.solana?.isPhantom) {\n      return (window as any).solana\n    }\n    return undefined\n  }\n\n  private _handleConnect = (...args: any) => {\n    this.emit('connect', ...args)\n  }\n\n  private _handleDisconnect = (...args: any) => {\n    this.emit('disconnect', ...args)\n  }\n\n  get connected() {\n    return this._provider?.isConnected || false\n  }\n\n  get autoApprove() {\n    return this._provider?.autoApprove || false\n  }\n\n  // eslint-disable-next-line\n  async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    if (!this._provider) {\n      return transactions\n    }\n\n    return this._provider.signAllTransactions(transactions)\n  }\n\n  get publicKey() {\n    return this._provider?.publicKey!\n  }\n\n  // eslint-disable-next-line\n  async signTransaction(transaction: Transaction) {\n    if (!this._provider) {\n      return transaction\n    }\n\n    return this._provider.signTransaction(transaction)\n  }\n\n  connect() {\n    if (!this._provider) {\n      return\n    }\n\n    if (!((window as any).solana.isPhantom)) {\n      \n      notify({\n        message: \"Phantom Error\",\n        description: \"Please install Phantom wallet from Chrome \",\n      });\n      return;\n    }\n\n\n    if (this._provider && !this._provider.listeners('connect').length) {\n      this._provider?.on('connect', this._handleConnect)\n    }\n    if (!this._provider.listeners('disconnect').length) {\n        this._provider?.on('disconnect', this._handleDisconnect)\n    }\n    return this._provider?.connect()\n  }\n\n  disconnect() {\n    if (this._provider) {\n      this._provider.disconnect()\n    }\n  }\n}","import type { PublicKey } from \"@solana/web3.js\";\n\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { Transaction } from \"@solana/web3.js\";\nimport { Button, Modal } from \"antd\";\nimport EventEmitter from \"eventemitter3\";\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { notify } from \"./../utils/notifications\";\nimport { onWalletConnected } from \"./../views/home/index\"\nimport { useConnectionConfig } from \"./connection\";\nimport { useLocalStorageState } from \"./../utils/utils\";\nimport { LedgerWalletAdapter } from \"../wallet-adapters/ledger\";\nimport { SolongWalletAdapter } from \"../wallet-adapters/solong\";\nimport { PhantomWalletAdapter } from \"../wallet-adapters/phantom\";\n\nconst ASSETS_URL =\n  \"https://raw.githubusercontent.com/solana-labs/oyster/main/assets/wallets/\";\nexport const WALLET_PROVIDERS = [\n  {\n    name: \"Sollet\",\n    url: \"https://www.sollet.io\",\n    icon: `${ASSETS_URL}sollet.svg`,\n  },\n  // {\n  //   name: \"Solong\",\n  //   url: \"https://solongwallet.com\",\n  //   icon: `${ASSETS_URL}solong.png`,\n  //   adapter: SolongWalletAdapter,\n  // },\n  // {\n  //   name: \"Solflare\",\n  //   url: \"https://solflare.com/access-wallet\",\n  //   icon: `${ASSETS_URL}solflare.svg`,\n  // },\n  // {\n  //   name: \"MathWallet\",\n  //   url: \"https://mathwallet.org\",\n  //   icon: `${ASSETS_URL}mathwallet.svg`,\n  // },\n  // {\n  //   name: \"Ledger\",\n  //   url: \"https://www.ledger.com\",\n  //   icon: `${ASSETS_URL}ledger.svg`,\n  //   adapter: LedgerWalletAdapter,\n  // },\n  {\n    name: \"Phantom\",\n    url: \"https://phantom.app/\",\n    icon: `https://raydium.io/_nuxt/img/phantom.d9e3c61.png`,\n    adapter: PhantomWalletAdapter,\n  },\n];\n\nexport interface WalletAdapter extends EventEmitter {\n  publicKey: PublicKey | null;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n  connect: () => any;\n  disconnect: () => any;\n}\n\nconst WalletContext = React.createContext<{\n  wallet: WalletAdapter | undefined;\n  connected: boolean;\n  select: () => void;\n  provider: typeof WALLET_PROVIDERS[number] | undefined;\n}>({\n  wallet: undefined,\n  connected: false,\n  select() {},\n  provider: undefined,\n});\n\nexport function WalletProvider({ children = null as any }) {\n  const { endpoint } = useConnectionConfig();\n\n  const [autoConnect, setAutoConnect] = useState(false);\n  const [providerUrl, setProviderUrl] = useLocalStorageState(\"walletProvider\");\n\n  const provider = useMemo(\n    () => WALLET_PROVIDERS.find(({ url }) => url === providerUrl),\n    [providerUrl]\n  );\n\n  const wallet = useMemo(\n    function () {\n      if (provider) {\n        return new (provider.adapter || Wallet)(\n          providerUrl,\n          endpoint\n        ) as WalletAdapter;\n      }\n    },\n    [provider, providerUrl, endpoint]\n  );\n\n  const [connected, setConnected] = useState(false);\n\n  useEffect(() => {\n    if (wallet) {\n      wallet.on(\"connect\", () => {\n        if (wallet.publicKey) {\n          setConnected(true);\n          console.log('set connected');\n          const walletPublicKey = wallet.publicKey.toBase58();\n          const keyToDisplay =\n            walletPublicKey.length > 20\n              ? `${walletPublicKey.substring(\n                  0,\n                  7\n                )}.....${walletPublicKey.substring(\n                  walletPublicKey.length - 7,\n                  walletPublicKey.length\n                )}`\n              : walletPublicKey;\n\n          notify({\n            message: \"Wallet update\",\n            description: \"Connected to wallet \" + keyToDisplay,\n          });\n          onWalletConnected();\n        }\n      });\n\n      wallet.on(\"disconnect\", () => {\n        setConnected(false);\n        console.log('set disconnected');\n        notify({\n          message: \"Wallet update\",\n          description: \"Disconnected from wallet\",\n        });\n      });\n    }\n\n    return () => {\n      setConnected(false);\n      console.log('set disconnected');\n      if (wallet) {\n        wallet.disconnect();\n      }\n    };\n  }, [wallet]);\n\n  useEffect(() => {\n    if (wallet && autoConnect) {\n      wallet.connect();\n      setAutoConnect(false);\n    }\n\n    return () => {};\n  }, [wallet, autoConnect]);\n\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const select = useCallback(() => setIsModalVisible(true), []);\n  const close = useCallback(() => setIsModalVisible(false), []);\n\n  return (\n    <WalletContext.Provider\n      value={{\n        wallet,\n        connected,\n        select,\n        provider,\n      }}\n    >\n      {children}\n      <Modal\n        title=\"Select Wallet\"\n        okText=\"Connect\"\n        visible={isModalVisible}\n        okButtonProps={{ style: { display: \"none\" } }}\n        onCancel={close}\n        width={400}\n      >\n        {WALLET_PROVIDERS.map((provider) => {\n          const onClick = function () {\n            setProviderUrl(provider.url);\n            setAutoConnect(true);\n            close();\n          };\n\n          return (\n            <Button\n              size=\"large\"\n              type={providerUrl === provider.url ? \"primary\" : \"ghost\"}\n              onClick={onClick}\n              icon={\n                <img\n                  alt={`${provider.name}`}\n                  width={20}\n                  height={20}\n                  src={provider.icon}\n                  style={{ marginRight: 8 }}\n                />\n              }\n              style={{\n                display: \"block\",\n                width: \"100%\",\n                textAlign: \"left\",\n                marginBottom: 8,\n              }}\n              key = {provider.name}\n            >\n              {provider.name}\n            </Button>\n          );\n        })}\n      </Modal>\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  const { wallet, connected, provider, select } = useContext(WalletContext);\n  return {\n    wallet,\n    connected,\n    provider,\n    select,\n    publicKey: wallet?.publicKey,\n    connect() {\n      wallet ? wallet.connect() : select();\n      console.log('connect 1');\n    },\n    disconnect() {\n      wallet?.disconnect();\n    },\n  };\n}\n"],"sourceRoot":""}